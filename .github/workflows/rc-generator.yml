name: RC Generator
on:
  repository_dispatch:
    types: [release-candidate]
permissions:
  contents: write
  issues: write
  pull-requests: write
  deployments: write
jobs:
  rc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Parse args
        id: args
        uses: actions/github-script@v7
        with:
          script: |
            const args = context.payload.client_payload.slash_command.args.trim();
            core.setOutput('version', args || '0.1.0');
      - name: Create milestone & draft release
        uses: actions/github-script@v7
        with:
          script: |
            const version = core.getInput('version') || '${{ steps.args.outputs.version }}';
            // Milestone
            const ms = await github.rest.issues.createMilestone({
              owner: context.repo.owner, repo: context.repo.repo, title: `v${version}`
            });
            // Draft release
            await github.rest.repos.createRelease({
              owner: context.repo.owner, repo: context.repo.repo,
              tag_name: `v${version}-rc`, name: `v${version} RC`, draft: true
            });
      - name: Create issues from automation/issues.json
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          jq -c '.[]' automation/issues.json | while read -r issue; do
            title=$(echo "$issue" | jq -r '.title')
            body=$(echo "$issue" | jq -r '.body')
            labels=$(echo "$issue" | jq -r '.labels | join(",")')
            gh issue create --title "$title" --body "$body" --label "$labels"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
