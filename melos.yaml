name: flutter_game_ecosystem

packages:
     - packages/* # ui_shell, providers, services, etc.
     - packages/*/* # services subpackages (analytics_firebase_adapter, core_services, core_services_isar)
     - modules/genres/* # game_scenes, etc.
     - examples/* # demo_game
     # game_core relocated under packages/

ignore:
     - '**/build/**'
     - '**/.dart_tool/**'

ide:
     intellij:
          enabled: false
     vscode:
          enabled: true

scripts:
     bootstrap: melos bootstrap
     clean: melos exec -- flutter clean
     get: melos exec -- flutter pub get
     analyze: melos exec -- dart analyze .
     format: melos exec -- dart format .
     format:check: melos exec -- dart format --output=none . --set-exit-if-changed
     flutter:warm: flutter --version
     test: melos run flutter:warm && melos exec --concurrency=1 -- flutter test --reporter expanded
     example: melos exec --scope="demo_game" -- flutter run
     verify-ci: melos run flutter:warm &&
          melos exec --scope="demo_game" -- flutter pub get &&
          melos exec --scope="demo_game" --concurrency=1 -- flutter test --dart-define=alchemist.platform=ci --reporter expanded
     check: melos run format &&
          melos run analyze &&
          melos run test
     test:non-goldens:
          # Run tests across the repo but skip the demo_game (which contains
          # golden tests). Useful for CI to separate golden runs.
          melos exec --ignore="demo_game" --concurrency=1 -- flutter test --reporter expanded
     test:goldens:
          # Run demo_game tests (goldens) in CI-mode so goldens are validated
          # with deterministic CI config.
          melos run flutter:warm && melos exec --scope="demo_game" --concurrency=1 -- flutter test --dart-define=alchemist.platform=ci --reporter expanded
     coverage:
          # Use the repository tool which runs per-package coverage and aggregates results.
          # The tool supports --verbose to stream per-package test output and --skip-metrics
          # to avoid the final metrics update when running locally.
          melos run flutter:warm && \
          dart run tools/run_all_package_coverage.dart --verbose --skip-metrics
     test:serial:
          # Run package tests serially using the repository helper to avoid Flutter startup lock
          melos run flutter:warm && bash tools/run_all_tests.sh
     kill-dart:
          # Interactive helper to kill dart/flutter processes
          bash tools/kill_dart_flutter.sh
     kill-dart:force:
          # Non-interactive: force kill and remove flutter SDK lockfile
          bash tools/kill_dart_flutter.sh -y --remove-lock
     bundle:
          # Create a zip of the repository excluding build and other ignored files
          bash tools/create_light_bundle.sh
